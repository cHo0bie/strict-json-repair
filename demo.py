import json, streamlit as st
from strict_json_repair.core import ensure_valid
from strict_json_repair.providers import get_provider
from strict_json_repair import pyd_models as M

st.set_page_config(page_title='Strict JSON + Repair', page_icon='üß∞', layout='wide')
st.title('Strict JSON + Repair ‚Äî Demo')

def_schema={'type':'object','required':['answer','confidence'],'properties':{'answer':{'type':'string'},'confidence':{'type':'number','minimum':0,'maximum':1}},'additionalProperties':False}

col1,col2=st.columns(2)
with col1:
    raw=st.text_area('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç LLM','```json\n{answer: \'–ü—Ä–∏–º–µ—Ä\', confidence: .9,}\n```',height=240)
with col2:
    mode=st.radio('–†–µ–∂–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏',['JSON Schema','Pydantic'],horizontal=True)
    if mode=='JSON Schema':
        schema_text=st.text_area('JSON Schema',json.dumps(def_schema,ensure_ascii=False,indent=2),height=240); schema=json.loads(schema_text); pyd=None
    else:
        pyd_opt=st.selectbox('Pydantic –º–æ–¥–µ–ª—å',['FAQAnswer']); schema=None; pyd=getattr(M,pyd_opt)

st.divider()
use_llm=st.checkbox('–í–∫–ª—é—á–∏—Ç—å LLM‚Äërepair (–µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –ø—Ä–æ—à—ë–ª)')
if use_llm: st.caption('–ü—Ä–æ–≤–∞–π–¥–µ—Ä –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')

if st.button('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ø–æ—á–∏–Ω–∏—Ç—å'):
    prov=get_provider() if use_llm else None
    data,err=ensure_valid(raw,schema=schema,pyd_model=pyd,llm_provider=prov,max_rounds=2)
    st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç')
    if err: st.error(err)
    else:
        st.success('–í–∞–ª–∏–¥–Ω–æ')
        st.code(json.dumps(data,ensure_ascii=False,indent=2),language='json')
